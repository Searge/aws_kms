name: Terraform Deploy (dev)

on:
  push:
    branches: [main]
    paths: ["kms/env/dev/**"]

permissions:
  id-token: write       # 🔐 For OIDC authentication
  contents: read        # 📁 Required for checkout

jobs:
  terraform:
    runs-on: ubuntu-latest

    env:
      AWS_REGION: us-east-1
      ROLE_ARN: arn:aws:iam::007695491693:role/github-actions
      ROLE_SESSION_NAME: github-actions-session
      TF_DIR: kms # keep paths in one place
      SENTINEL_DIR: sentinel

    steps:
      # ──────────────────────────────────────────────────────────────────────
      #  AWS creds + checkout + Terraform CLI
      # ──────────────────────────────────────────────────────────────────────
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Checkout source
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: latest

      # ──────────────────────────────────────────────────────────────────────
      #  Terraform init / validate / plan → JSON
      # ──────────────────────────────────────────────────────────────────────
      - name: Terraform Init
        working-directory: ${{ env.TF_DIR }}
        run: terraform init -input=false -backend-config=env/dev/backend.tfvars

      - name: Terraform Validate
        working-directory: ${{ env.TF_DIR }}
        run: terraform validate

      - name: Terraform Plan (save & export JSON)
        id: tfplan
        working-directory: ${{ env.TF_DIR }}
        run: |
          terraform plan -out=plan.tfplan -input=false -var-file=env/dev/terraform.tfvars
          terraform show -no-color -json plan.tfplan > plan.json

      # ──────────────────────────────────────────────────────────────────────
      #  Convert plan.json → Sentinel mock
      # ──────────────────────────────────────────────────────────────────────
      - name: Setup Python for mock converter
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      - name: Install sentinel-mock-plan helper
        run: pip install sentinel-mock-plan

      - name: Generate Sentinel mock from plan
        run: |
          echo "Current directory: $(pwd)"
          mkdir -p ./tmp
          python -m sentinel_mock_plan \
            --infile  ${{ env.TF_DIR }}/plan.json \
            --outfile ./tmp/mock-tfplan-pass-v2.sentinel

          mv ./tmp/mock-tfplan-pass-v2.sentinel ${{ env.SENTINEL_DIR }}/env/dev/mocks/mock-tfplan-pass-v2.sentinel

          ls -lha ${{ env.SENTINEL_DIR }}/env/dev/mocks/

      - name: Display Sentinel mock
        run: |
          cat ${{ env.SENTINEL_DIR }}/env/dev/mocks/mock-tfplan-pass-v2.sentinel

      # ───────────────────────────────────────────────────────────────
      #  Install Sentinel CLI (download → unzip → add to PATH)
      # ───────────────────────────────────────────────────────────────
      - name: Install Sentinel CLI
        shell: bash
        run: |
          SENT_VERSION="0.30.0"
          SENT_URL="https://releases.hashicorp.com/sentinel/${SENT_VERSION}/sentinel_${SENT_VERSION}_linux_amd64.zip"

          echo "↳ downloading Sentinel $SENT_VERSION …"
          mkdir -p /tmp/sentinel
          curl -sSL "${SENT_URL}" -o /tmp/sentinel/sentinel.zip

          echo "↳ unzipping …"
          unzip -q /tmp/sentinel/sentinel.zip -d /tmp/sentinel

          echo "↳ adding to PATH …"
          chmod +x /tmp/sentinel/sentinel
          echo "/tmp/sentinel" >> $GITHUB_PATH   # makes `sentinel` available in later steps

      # ───────────────────────────────────────────────────────────────
      #  Run Sentinel tests
      # ───────────────────────────────────────────────────────────────
      - name: Run Sentinel tests
        working-directory: ${{ env.SENTINEL_DIR }}
        run: |
          echo "Sentinel version:"
          sentinel --version
          echo "Running tests …"
          sentinel test env/dev
          # ::error:: is emitted automatically if any test fails and exit-code ≠ 0

      # ──────────────────────────────────────────────────────────────────────
      #  Apply only if *everything* above has succeeded
      # ──────────────────────────────────────────────────────────────────────
      - name: Terraform Apply
        if: success() # skip if Sentinel or any previous step failed
        working-directory: ${{ env.TF_DIR }}
        run: terraform apply --auto-approve -input=false "plan.tfplan"
